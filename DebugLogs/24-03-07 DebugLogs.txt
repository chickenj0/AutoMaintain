**********************
Windows PowerShell transcript start
Start time: 20240307121139
Username: PRTEKREFRIG03\Owner
RunAs User: PRTEKREFRIG03\Owner
Configuration Name: 
Machine: PRTEKREFRIG03 (Microsoft Windows NT 10.0.22631.0)
Host Application: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
Process ID: 17192
PSVersion: 5.1.22621.2506
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.22621.2506
BuildVersion: 10.0.22621.2506
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is C:\AutoMaintainLogs_Transcript.txt
PS C:\Users\Owner> # Set the execution policy to RemoteSigned for the current user.
PS C:\Users\Owner> Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned;
PS C:\Users\Owner> # Enable System Restore for the C: drive.
PS C:\Users\Owner> Enable-ComputerRestore -Drive "C:\";
PS C:\Users\Owner> # Create a restore point with the description "MaintenanceRestorePoint" for modifying settings.
PS C:\Users\Owner> Checkpoint-Computer -Description "MaintenanceRestorePoint" -RestorePointType "MODIFY_SETTINGS";
PS C:\Users\Owner> # Install the NuGet package provider with the Force parameter for the current user scope.
PS C:\Users\Owner> Install-PackageProvider -Name NuGet -Force -Scope CurrentUser;

Name                           Version          Source           Summary
----                           -------          ------           -------
nuget                          2.8.5.208        https://onege... NuGet provider for the OneGet meta-package manager


PS C:\Users\Owner> # Set the installation policy for the PSGallery repository to 'Trusted.'
PS C:\Users\Owner> Set-PSRepository -Name PSGallery -InstallationPolicy Trusted;
PS C:\Users\Owner> # Install the PowerShellGet module with the Force parameter.
PS C:\Users\Owner> Install-Module PowerShellGet -Force -PassThru;
>> TerminatingError(Install-Module): "A parameter cannot be found that matches parameter name 'PassThru'."
Install-Module : A parameter cannot be found that matches parameter name 'PassThru'.
At line:1 char:37
+ Install-Module PowerShellGet -Force -PassThru;
+                                     ~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Install-Module], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Install-Module
Install-Module : A parameter cannot be found that matches parameter name 'PassThru'.
At line:1 char:37
+ Install-Module PowerShellGet -Force -PassThru;
+                                     ~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Install-Module], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Install-Module

PS C:\Users\Owner> # Install the PSWindowsUpdate module with the Force and AllowClobber parameters for the current user scope.
PS C:\Users\Owner> Install-Module PSWindowsUpdate -Force -AllowClobber -Scope CurrentUser -PassThru;
>> TerminatingError(Install-Module): "A parameter cannot be found that matches parameter name 'PassThru'."
Install-Module : A parameter cannot be found that matches parameter name 'PassThru'.
At line:1 char:72
+ ... le PSWindowsUpdate -Force -AllowClobber -Scope CurrentUser -PassThru;
+                                                                ~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Install-Module], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Install-Module
Install-Module : A parameter cannot be found that matches parameter name 'PassThru'.
At line:1 char:72
+ ... le PSWindowsUpdate -Force -AllowClobber -Scope CurrentUser -PassThru;
+                                                                ~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Install-Module], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Install-Module

PS C:\Users\Owner> # Import the PSWindowsUpdate module.
PS C:\Users\Owner> Import-Module PSWindowsUpdate -PassThru ;
Import-Module : The specified module 'PSWindowsUpdate' was not loaded because no valid module file was found in any 
module directory.
At line:1 char:1
+ Import-Module PSWindowsUpdate -PassThru ;
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (PSWindowsUpdate:String) [Import-Module], FileNotFoundException
    + FullyQualifiedErrorId : Modules_ModuleNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand
Import-Module : The specified module 'PSWindowsUpdate' was not loaded because no valid module file was found in any
module directory.
At line:1 char:1
+ Import-Module PSWindowsUpdate -PassThru ;
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (PSWindowsUpdate:String) [Import-Module], FileNotFoundException
    + FullyQualifiedErrorId : Modules_ModuleNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand

PS C:\Users\Owner> # Update all PowerShell modules
PS C:\Users\Owner> Update-Module -Name * -PassThru;
>> TerminatingError(Update-Module): "A parameter cannot be found that matches parameter name 'PassThru'."
Update-Module : A parameter cannot be found that matches parameter name 'PassThru'.
At line:1 char:23
+ Update-Module -Name * -PassThru;
+                       ~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Update-Module], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Update-Module
Update-Module : A parameter cannot be found that matches parameter name 'PassThru'.
At line:1 char:23
+ Update-Module -Name * -PassThru;
+                       ~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Update-Module], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Update-Module

PS C:\Users\Owner> # Get and install all available Windows updates, accepting all prompts.
PS C:\Users\Owner> Get-WindowsUpdate -Install -AcceptAll;
Get-WindowsUpdate : The term 'Get-WindowsUpdate' is not recognized as the name of a cmdlet, function, script file, or 
operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try 
again.
At line:1 char:1
+ Get-WindowsUpdate -Install -AcceptAll;
+ ~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Get-WindowsUpdate:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
Get-WindowsUpdate : The term 'Get-WindowsUpdate' is not recognized as the name of a cmdlet, function, script file, or
operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:1
+ Get-WindowsUpdate -Install -AcceptAll;
+ ~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Get-WindowsUpdate:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\Owner> # Install Adobe Acrobat Reader using the Windows Package Manager (winget).
PS C:\Users\Owner> winget install adobe.acrobat.reader.64-bit -Wait;

PS C:\Users\Owner> # Install Apple iTunes using the Windows Package Manager (winget).
PS C:\Users\Owner> winget install apple.itunes -Wait;

PS C:\Users\Owner> # Install VLC Media Player using the Windows Package Manager (winget).
PS C:\Users\Owner> winget install VideoLAN.VLC -Wait;

PS C:\Users\Owner> # Install 7-Zip using the Windows Package Manager (winget).
PS C:\Users\Owner> winget install 7zip.7zip -Wait;

PS C:\Users\Owner> # Opening MS Store Downloads and Updates
PS C:\Users\Owner> Start-Process "ms-windows-store://downloadsandupdates";
PS C:\Users\Owner> # Open storage sense # Start MS Windows Update
PS C:\Users\Owner> Start-Process "ms-settings:storagesense" && Start-Process 'ms-settings:windowsupdate';
At line:1 char:42
+ Start-Process "ms-settings:storagesense" && Start-Process 'ms-setting ...
+                                          ~~
The token '&&' is not a valid statement separator in this version.
At line:1 char:42
+ Start-Process "ms-settings:storagesense" && Start-Process 'ms-setting ...
+                                          ~~
The token '&&' is not a valid statement separator in this version.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : InvalidEndOfLine

PS C:\Users\Owner> # Run cleanmgr command
PS C:\Users\Owner> Start-Process -FilePath "cleanmgr.exe" -ArgumentList "/sagerun:1" -NoNewWindow -Verbose -PassThru -Wait;

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName
-------  ------    -----      -----     ------     --  -- -----------
     66       7     2556       3960       0.03  16972   2 cleanmgr


PS C:\Users\Owner> # Optimize C: drive with ReTrim
PS C:\Users\Owner> Optimize-Volume -DriveLetter C -ReTrim -Verbose -Wait;
PS C:\Users\Owner> TerminatingError(Optimize-Volume): "A parameter cannot be found that matches parameter name 'Wait'."
Optimize-Volume : A parameter cannot be found that matches parameter name 'Wait'.
At line:1 char:49
+ Optimize-Volume -DriveLetter C -ReTrim -Verbose -Wait;
+                                                 ~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Optimize-Volume], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Optimize-Volume
Optimize-Volume : A parameter cannot be found that matches parameter name 'Wait'.
At line:1 char:49
+ Optimize-Volume -DriveLetter C -ReTrim -Verbose -Wait;
+                                                 ~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Optimize-Volume], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Optimize-Volume

PS C:\Users\Owner> # Run SFC /scannow command
PS C:\Users\Owner> SFC /scannow - Verbose -PassThru -Wait;

PS C:\Users\Owner> # Updating WinGet package manager
PS C:\Users\Owner> Winget upgrade --all --include-unknown -Wait;

PS C:\Users\Owner> # Stop transcript to end logging
PS C:\Users\Owner> Stop-Transcript
**********************
Windows PowerShell transcript end
End time: 20240307121634
**********************
**********************
Windows PowerShell transcript start
Start time: 20240307121812
Username: PRTEKREFRIG03\Owner
RunAs User: PRTEKREFRIG03\Owner
Configuration Name: 
Machine: PRTEKREFRIG03 (Microsoft Windows NT 10.0.22631.0)
Host Application: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
Process ID: 3756
PSVersion: 5.1.22621.2506
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.22621.2506
BuildVersion: 10.0.22621.2506
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is C:\AutoMaintainLogs_Transcript.txt
PS C:\Users\Owner> # Set the execution policy to RemoteSigned for the current user.
PS C:\Users\Owner> Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned;
PS C:\Users\Owner> # Enable System Restore for the C: drive.
PS C:\Users\Owner> Enable-ComputerRestore -Drive "C:\";
PS C:\Users\Owner> # Create a restore point with the description "MaintenanceRestorePoint" for modifying settings.
PS C:\Users\Owner> Checkpoint-Computer -Description "MaintenanceRestorePoint" -RestorePointType "MODIFY_SETTINGS";
WARNING: A new system restore point cannot be created because one has already been created within the past 1440 minutes. The frequency of restore point creation can be changed by creating the DWORD value 'SystemRestorePointCreationFrequency' under the registry key 'HKLM\Software\Microsoft\Windows NT\CurrentVersion\SystemRestore'. The value of this registry key indicates the necessary time interval (in minutes) between two restore point creation. The default value is 1440 minutes (24 hours).
PS C:\Users\Owner> # Install the NuGet package provider with the Force parameter for the current user scope.
PS C:\Users\Owner> Install-PackageProvider -Name NuGet -Force -Scope CurrentUser;

Name                           Version          Source           Summary
----                           -------          ------           -------
nuget                          2.8.5.208        https://onege... NuGet provider for the OneGet meta-package manager


PS C:\Users\Owner> # Set the installation policy for the PSGallery repository to 'Trusted.'
PS C:\Users\Owner> Set-PSRepository -Name PSGallery -InstallationPolicy Trusted;
PS C:\Users\Owner> # Install the PowerShellGet module with the Force parameter.
PS C:\Users\Owner> Install-Module PowerShellGet -Force;
PS C:\Users\Owner> # Install the PSWindowsUpdate module with the Force and AllowClobber parameters for the current user scope.
PS C:\Users\Owner> Install-Module PSWindowsUpdate -Force -AllowClobber -Scope CurrentUser;
PS C:\Users\Owner> # Import the PSWindowsUpdate module.
PS C:\Users\Owner> Import-Module PSWindowsUpdate;
PS C:\Users\Owner> # Update all PowerShell modules
PS C:\Users\Owner> Update-Module -Name *;
PS C:\Users\Owner> # Get and install all available Windows updates, accepting all prompts.
PS C:\Users\Owner> Get-WindowsUpdate -Install -AcceptAll;
PS C:\Users\Owner> # Install Adobe Acrobat Reader using the Windows Package Manager (winget).
PS C:\Users\Owner> winget install adobe.acrobat.reader.64-bit;

PS C:\Users\Owner> # Install Apple iTunes using the Windows Package Manager (winget).
PS C:\Users\Owner> winget install apple.itunes;

PS C:\Users\Owner> # Install VLC Media Player using the Windows Package Manager (winget).
PS C:\Users\Owner> winget install VideoLAN.VLC;

PS C:\Users\Owner> # Install 7-Zip using the Windows Package Manager (winget).
PS C:\Users\Owner> winget install 7zip.7zip;

PS C:\Users\Owner> # Opening MS Store Downloads and Updates
PS C:\Users\Owner> Start-Process "ms-windows-store://downloadsandupdates";
PS C:\Users\Owner> # Open storage sense # Start MS Windows Update
PS C:\Users\Owner> Start-Process "ms-settings:storagesense";
PS C:\Users\Owner> Start-Process 'ms-settings:windowsupdate';
PS C:\Users\Owner> # Run cleanmgr command
PS C:\Users\Owner> Start-Process -FilePath "cleanmgr.exe" -ArgumentList "/sagerun:1" -NoNewWindow -Verbose -PassThru -Wait;

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName
-------  ------    -----      -----     ------     --  -- -----------
     11       2      448       2192       0.02  13328   2 cleanmgr


PS C:\Users\Owner> # Optimize C: drive with ReTrim
PS C:\Users\Owner> Optimize-Volume -DriveLetter C -ReTrim -Verbose;
VERBOSE: Invoking retrim on (C:)...
VERBOSE: Retrim:  0% complete...
VERBOSE: Retrim:  100% complete.
VERBOSE: Performing pass 1:
VERBOSE: Retrim:  25% complete...
VERBOSE: Retrim:  30% complete...
VERBOSE: Retrim:  32% complete...
VERBOSE: Retrim:  34% complete...
VERBOSE: Retrim:  37% complete...
VERBOSE: Retrim:  39% complete...
VERBOSE: Retrim:  42% complete...
VERBOSE: Retrim:  44% complete...
VERBOSE: Retrim:  47% complete...
VERBOSE: Retrim:  49% complete...
VERBOSE: Retrim:  51% complete...
VERBOSE: Retrim:  54% complete...
VERBOSE: Retrim:  56% complete...
VERBOSE: Retrim:  59% complete...
VERBOSE: Retrim:  61% complete...
VERBOSE: Retrim:  64% complete...
VERBOSE: Retrim:  66% complete...
VERBOSE: Retrim:  67% complete...
VERBOSE: Retrim:  70% complete...
VERBOSE: Retrim:  73% complete...
VERBOSE: Retrim:  76% complete...
VERBOSE: Retrim:  79% complete...
VERBOSE: Retrim:  81% complete...
VERBOSE: Retrim:  83% complete...
VERBOSE: Retrim:  84% complete...
VERBOSE: Retrim:  86% complete...
VERBOSE: Retrim:  89% complete...
VERBOSE: Retrim:  91% complete...
VERBOSE: Retrim:  94% complete...
VERBOSE: Retrim:  97% complete...
VERBOSE: Retrim:  99% complete...
VERBOSE: Retrim:  100% complete.
VERBOSE: 
Post Defragmentation Report:
VERBOSE: 
	Volume Information:
VERBOSE: 		Volume size                 = 930.79 GB
VERBOSE: 		Cluster size                = 4 KB
VERBOSE: 		Used space                  = 273.41 GB
VERBOSE: 		Free space                  = 657.38 GB
VERBOSE: 
	Retrim:
VERBOSE: 		Backed allocations          = 931
VERBOSE: 		Allocations trimmed         = 6232
VERBOSE: 		Total space trimmed         = 661.68 GB
PS C:\Users\Owner> # Run SFC /scannow command
PS C:\Users\Owner> SFC /scannow - Verbose -PassThru -Wait;

PS C:\Users\Owner> # Updating WinGet package manager
PS C:\Users\Owner> Winget upgrade --all --include-unknown;

PS C:\Users\Owner> # Stop transcript to end logging
PS C:\Users\Owner> Stop-Transcript;
**********************
Windows PowerShell transcript end
End time: 20240307122910
**********************
